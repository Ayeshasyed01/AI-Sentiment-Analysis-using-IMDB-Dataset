# -*- coding: utf-8 -*-
"""02_03b.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pZFkRjZS2hsB3ltzXdKxtmFz79o_ZaVv
"""

# Install Hugging Face Transformers, datasets, and torch libraries
# Uncomment the line below to install if not already installed
!pip install transformers datasets torch

# Import libraries
from transformers import AutoTokenizer, AutoModelForSequenceClassification, Trainer, TrainingArguments
from datasets import load_dataset
import numpy as np
from sklearn.metrics import accuracy_score, precision_recall_fscore_support
import torch

# Check if GPU is available
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"using device: {device}")

!pip install --upgrade datasets fsspec

from datasets import load_dataset

# Load the dataset
imdb_dataset = load_dataset("imdb")

# Define a preprocessing function
def preprocess(text):
    # Lowercase text and strip extra whitespace
    return text.lower().strip()

# Apply preprocessing to the dataset
imdb_dataset = imdb_dataset.map(lambda x: {'text': preprocess(x['text'])})

# Split the dataset
train_data, test_data = imdb_dataset['train'], imdb_dataset['test']

# Check a sample after preprocessing
print(train_data[10])

# Initialize tokenizer
model_name = "distilbert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_name)

# Define tokenization function
def tokenize(dict_items):
    return tokenizer(
        dict_items["text"],
        padding="max_length",
        truncation=True,
        max_length=128
    )

# Apply tokenization
tokenized_train_data = train_data.map(tokenize, batched=True)
tokenized_test_data = test_data.map(tokenize, batched=True)

# Initialize tokenizer
model_name = "distilbert-base-uncased"
tokenizer = AutoTokenizer.from_pretrained(model_name)

# For illustration purposes only
sample_text = train_data[10]['text']

# Example configuration for padding and truncation
# Cut off sequences longer than the model's max input size
# Pad to the model's max input size
tokenized_sample = tokenizer(sample_text, padding="max_length", truncation=True, max_length=512)

# View padded and truncated tokenized output
print(tokenized_sample)
print(len(tokenized_sample['input_ids']))

#set up the model
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2)
#print model architechture
print(model)

import transformers
print(transformers.__version__)

from transformers import TrainingArguments

training_args = TrainingArguments(
    output_dir="./results",
    eval_strategy="epoch",
    learning_rate=5e-5,
    num_train_epochs=3,
    weight_decay=0.01,
    logging_steps=10,
    save_strategy="epoch",
    load_best_model_at_end=True
)

print(training_args)

# Define evaluation metrics
def compute_metrics(pred):
    labels = pred.label_ids
    preds = np.argmax(pred.predictions, axis=-1)

    accuracy = accuracy_score(labels, preds)
    precision, recall, f1, _ = precision_recall_fscore_support(labels, preds, average='binary')

    return {
        "accuracy": accuracy,
        "precision": precision,
        "recall": recall,
        "f1": f1
    }

# Initialize the Trainer
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=tokenized_train_data,
    eval_dataset=tokenized_test_data,
    compute_metrics=compute_metrics
)

# Train the model
trainer.train()

# Evaluate the model
eval_result = trainer.evaluate()
print("Evaluation results:", eval_result)

def predict_Sentiment(text):
    # Tokenize the input text
    tokens = tokenizer(text, padding=True, truncation=True, return_tensors="pt", max_length=128)
    # Move tokens to device
    tokens = {key: value.to(device) for key, value in tokens.items()}
    # Get model predictions
    output = model(**tokens)
    # Get the predicted class
    prediction = torch.argmax(output.logits, dim=1).item()
    sentiment = "Positive" if prediction == 1 else "Negative"
    return sentiment

# Example: Testing with a new sentence
new_text = "This movie was amazing! I loved every minute of it."
print(predict_Sentiment(new_text))